Can you integrate these codes in the current once

-
To implement OTP (One-Time Password) in your PHP application using Composer, follow these steps:

---

### **Step 1: Install OTP Library via Composer**
You need a package to generate and validate OTPs. One of the best libraries for this is **RobThree/TwoFactorAuth**, which supports TOTP (Time-Based One-Time Password).

Run this command in your project root:

```sh
composer require robthree/twofactorauth
```

Alternatively, if you need email-based OTPs, you can use **PHPMailer**:

```sh
composer require phpmailer/phpmailer
```

---

### **Step 2: Modify Your Authentication Code to Support OTP**
Since you have `tbl_2fa`, we will:
- Generate a 6-digit OTP when a user logs in.
- Store it in `tbl_2fa` with an expiration timestamp.
- Send the OTP via email.
- Verify OTP before granting access.

#### **Updating `auth.php` to Include OTP Handling**

Modify your `auth.php` file to include OTP generation and verification.

```php
<?php
header("Content-Type: application/json");
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Headers: *");
header("Access-Control-Allow-Methods: POST");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");

require_once 'db_connect.php';
require 'vendor/autoload.php'; // Load Composer dependencies

use RobThree\Auth\TwoFactorAuth;
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

class Auth {
    private $conn;

    public function __construct($db) {
        $this->conn = $db;
    }

    // Function to generate and send OTP
    public function sendOTP($email, $user_id) {
        $otp = rand(100000, 999999); // Generate a 6-digit OTP
        $expiresAt = date("Y-m-d H:i:s", strtotime("+10 minutes")); // OTP expires in 10 minutes

        // Store OTP in the database
        $stmt = $this->conn->prepare("INSERT INTO tbl_2fa (user_id, email, otp_code, expires_at)
                                      VALUES (?, ?, ?, ?)
                                      ON DUPLICATE KEY UPDATE otp_code = VALUES(otp_code), expires_at = VALUES(expires_at)");
        $stmt->execute([$user_id, $email, $otp, $expiresAt]);

        // Send OTP via Email
        return $this->sendEmailOTP($email, $otp);
    }

    // Function to send email with OTP
    public function sendEmailOTP($email, $otp) {
        $mail = new PHPMailer(true);
        try {
            $mail->isSMTP();
            $mail->Host = 'smtp.gmail.com'; // Change this to your SMTP provider
            $mail->SMTPAuth = true;
            $mail->Username = 'your-email@gmail.com'; // Set your email
            $mail->Password = 'your-email-password'; // Set your email password
            $mail->SMTPSecure = 'tls';
            $mail->Port = 587;

            $mail->setFrom('your-email@gmail.com', 'Event Planning System');
            $mail->addAddress($email);

            $mail->isHTML(true);
            $mail->Subject = 'Your OTP Code';
            $mail->Body = "Your OTP code is <b>$otp</b>. It expires in 10 minutes.";

            $mail->send();
            return json_encode(["status" => "otp_sent", "message" => "OTP sent to your email"]);
        } catch (Exception $e) {
            return json_encode(["status" => "error", "message" => "Mailer Error: " . $mail->ErrorInfo]);
        }
    }

    // Verify OTP
    public function verifyOTP($user_id, $otp) {
        $stmt = $this->conn->prepare("SELECT * FROM tbl_2fa WHERE user_id = ? AND otp_code = ? AND expires_at > NOW()");
        $stmt->execute([$user_id, $otp]);

        if ($stmt->rowCount() > 0) {
            // OTP is valid, delete it after verification
            $this->conn->prepare("DELETE FROM tbl_2fa WHERE user_id = ?")->execute([$user_id]);
            return json_encode(["status" => "success", "message" => "OTP verified"]);
        } else {
            return json_encode(["status" => "error", "message" => "Invalid or expired OTP"]);
        }
    }

    // Login function modified to require OTP
    public function login($username, $password) {
        if (empty($username) || empty($password)) {
            return json_encode(["status" => "error", "message" => "Username and password are required."]);
        }

        $stmt = $this->conn->prepare("SELECT * FROM tbl_users WHERE user_username = ?");
        $stmt->execute([$username]);

        if ($stmt->rowCount() === 0) {
            return json_encode(["status" => "error", "message" => "User not found."]);
        }

        $user = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!password_verify($password, $user['user_pwd'])) {
            return json_encode(["status" => "error", "message" => "Invalid password."]);
        }

        // Send OTP before logging in
        return $this->sendOTP($user['user_email'], $user['user_id']);
    }
}

$auth = new Auth($pdo);

$operation = $_POST['operation'] ?? '';
$jsonData = json_decode(file_get_contents("php://input"), true);

if (empty($operation) && isset($jsonData['operation'])) {
    $operation = $jsonData['operation'];
}

switch ($operation) {
    case "login":
        echo $auth->login($_POST['username'] ?? $jsonData['username'], $_POST['password'] ?? $jsonData['password']);
        break;
    case "verify_otp":
        echo $auth->verifyOTP($_POST['user_id'] ?? $jsonData['user_id'], $_POST['otp'] ?? $jsonData['otp']);
        break;
    default:
        echo json_encode(["status" => "error", "message" => "Invalid action."]);
        break;
}
?>
```

---

### **Step 3: Update Your Frontend for OTP Flow**
Modify your **login flow** in `login/page.tsx` to handle OTP redirection:

```tsx
if (response.data.status === "otp_sent") {
  localStorage.setItem("pending_otp_user_id", response.data.user_id);
  router.push("/auth/verify-otp");
}
```

Modify **`verify-otp/page.tsx`** to send OTP verification request:

```tsx
const handleVerify = async () => {
  const user_id = localStorage.getItem("pending_otp_user_id");
  if (!user_id) {
    setMessage("User session expired.");
    return;
  }

  try {
    const formData = new FormData();
    formData.append("operation", "verify_otp");
    formData.append("user_id", user_id);
    formData.append("otp", otp);

    const response = await axios.post(`${API_URL}/auth.php`, formData);

    if (response.data.status === "success") {
      localStorage.removeItem("pending_otp_user_id");
      router.push("/dashboard"); // Redirect after OTP verification
    } else {
      setMessage(response.data.message || "Invalid OTP");
    }
  } catch (error) {
    setMessage("Error verifying OTP. Please try again.");
  }
};
```

---

### **Step 4: Database & SMTP Configuration**
#### **Modify `tbl_2fa` Table**
Since you already have `tbl_2fa`, ensure it has proper indexing:

```sql
ALTER TABLE tbl_2fa
ADD UNIQUE KEY (user_id);
```

#### **Setup SMTP for PHPMailer**
Replace:
```php
$mail->Host = 'smtp.gmail.com';
$mail->Username = 'your-email@gmail.com';
$mail->Password = 'your-email-password';
```
With **your SMTP provider credentials**. If using Gmail, enable **Less Secure Apps** or use **App Passwords**.

---

### **Conclusion**
- Installed OTP with Composer (`robthree/twofactorauth` for TOTP, `phpmailer/phpmailer` for email OTP).
- Modified login to require OTP before authentication.
- Integrated email sending via PHPMailer.
- Updated the frontend to handle OTP verification.

Let me know if you need further enhancements! ðŸš€
